{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/Nav/Nav.js","components/Container/Container.js","components/Game/Clickers.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","Nav","props","href","words","score","highScore","Container","id","children","Clickers","onClick","handleClick","name","App","state","Colors","beenClicked","_this","indexOf","console","log","colorIsClicked","handleScoreIncrement","handleGameReset","newScore","setState","toShuffle","clearBoard","shuffleTheDeck","concat","this","array","i","length","j","Math","floor","random","_ref","_this2","components_Nav_Nav","components_Jumbotron_Jumbotron","components_Container_Container","map","color","Clickers_Clickers","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37c60472.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Jumbotron.css\";\r\n\r\nconst Jumbotron = () => (\r\n\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n\r\n        <div className=\"container\">\r\n            <h1 className=\"display-4\">Clicky Game</h1>\r\n            <p className=\"lead\">Click an image to earn points. But don't click the same image twice. Bad things happen.</p>\r\n        </div>\r\n        \r\n    </div>\r\n\r\n);\r\n\r\nexport default Jumbotron","import React from \"react\";\nimport \"./Nav.css\";\n\nconst Nav = props => (\n\n    <nav className=\"navbar\">\n\n        <ul>\n\n            <li className=\"brand\" href=\"/\">Clicky Game</li>\n            <li>{props.words}</li>\n            <li>Score: {props.score} | High Score: {props.highScore}</li>\n\n        </ul>\n        \n    </nav>\n\n);\n\nexport default Nav","import React from \"react\";\nimport \"./Container.css\";\n\nconst Container = props => <div className=\"container\" id=\"the-main-game\">{props.children}</div>;\n\nexport default Container;","import React from \"react\";\nimport \"./Clickers.css\";\n\nexport const Clickers = props => (\n\n    <div className=\"clickers color-holder\" onClick={() => props.handleClick(props.id)}>\n        <div className=\"color-box\" id={props.name + \"-\" + props.id} name={props.name}></div>\n    </div>\n\n);\n","import React, { Component } from \"react\";\nimport './App.css';\nimport Jumbotron from \"./components/Jumbotron\";\nimport Nav from \"./components/Nav\";\nimport Container from \"./components/Container\"\nimport { Clickers } from \"./components/Game\"\nimport Colors from \"./data.json\";\n\n\nclass App extends Component {\n\n  state = {\n    Colors,\n    score: 0,\n    highScore: 0,\n    words: \"Click a color to play!\",\n    beenClicked: []\n  };\n\n  //shuffles on page load\n  componentDidMount() {\n    this.setState({ Colors: this.shuffleTheDeck(Colors) });\n  }\n\n  //click handler\n  handleClick = id => {\n\n    if (this.state.beenClicked.indexOf(id) === -1) {\n\n      console.log(id + \" has been clicked\");\n      this.colorIsClicked(id);\n      this.handleScoreIncrement();\n\n    } else {\n\n      this.handleGameReset();\n\n    }\n\n  };\n\n  //handles increment\n  handleScoreIncrement = () => {\n\n    let newScore = this.state.score + 1;\n\n    console.log(\"Point scored. New score is \" + newScore);\n\n    this.setState({\n      score: newScore,\n      words: \"Nice. Keep going!\"\n    });\n\n    if (newScore >= this.state.highScore) {\n\n      this.setState({ highScore: newScore });\n\n    } else if (newScore === 12) {\n\n      this.setState({ words: \"You won!\" });\n\n    }\n\n    this.toShuffle();\n\n  }\n\n  handleGameReset = () => {\n\n    console.log(\"Game over. Game is resetting.\");\n    this.clearBoard();\n    this.toShuffle();\n\n  }\n\n  //initiates shuffle function and sets newly shuffled of color divs to \"state = Colors\"\n  toShuffle = () => {\n\n    console.log(\"Shuffling Color blocks.\");\n    this.setState({ Colors: this.shuffleTheDeck(Colors) });\n\n  };\n\n  //this function does the actual shuffling\n  shuffleTheDeck(array) {\n\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n\n  }\n\n\n  //helper function to reset game state\n  clearBoard = () => {\n\n    console.log(\"Game is now reset.\");\n    this.setState({\n      beenClicked: [],\n      words: \"Click a color to play!\",\n      score: 0\n    });\n\n  }\n\n  //helper function to add clicked Color to state's beenClicked array\n  colorIsClicked = id => {\n\n    this.setState({ beenClicked: this.state.beenClicked.concat(id) });\n    console.log(this.state.beenClicked);\n\n  }\n\n\n  render() {\n    return (\n      <div>\n\n        <Nav\n          words={this.state.words}\n          score={this.state.score}\n          highScore={this.state.highScore}\n        />\n        <Jumbotron />\n        <Container>\n          {this.state.Colors.map(color => (\n            <Clickers\n              key={color.id}\n              id={color.id}\n              name={color.name}\n              color={color.color}\n              handleClick={this.handleClick}\n            />\n          ))}\n        </Container>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}